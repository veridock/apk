<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"  viewBox="0 0 350 400">
  <rect width="350" height="400" fill="#ecf0f1" rx="10"/>
  <text x="175" y="30" text-anchor="middle" fill="#2c3e50" font-size="24">{APP_TITLE}</text>
  
  <!-- Game board -->
    <!-- Grid lines -->
    <line x1="83" y1="0" x2="83" y2="250" stroke="#34495e" stroke-width="3"/>
    <line x1="167" y1="0" x2="167" y2="250" stroke="#34495e" stroke-width="3"/>
    <line x1="0" y1="83" x2="250" y2="83" stroke="#34495e" stroke-width="3"/>
    <line x1="0" y1="167" x2="250" y2="167" stroke="#34495e" stroke-width="3"/>
    
    <!-- Game cells -->
    <?php for ($i = 0; $i < 3; $i++): ?>
      <?php for ($j = 0; $j < 3; $j++): ?>
        <?php
          $x = $j * 83.33;
          $y = $i * 83.33;
          $cellId = $i * 3 + $j;
        ?>
        <rect x="<?php echo $x; ?>" y="<?php echo $y; ?>" width="83" height="83" 
              fill="transparent" class="cell" data-cell="<?php echo $cellId; ?>" 
              style="cursor: pointer;"/>
      <?php endfor; ?>
    <?php endfor; ?>

  <!-- Game status -->
  <text x="175" y="340" text-anchor="middle" fill="#2c3e50" font-size="18" id="game-status">Player X's turn</text>
  
  <!-- Reset button -->
  <rect x="125" y="360" width="100" height="30" fill="#3498db" rx="5" id="reset-btn" style="cursor: pointer;"/>
  <text x="175" y="380" text-anchor="middle" fill="white" font-size="14" pointer-events="none">New Game</text>
  
  <script><![CDATA[
    let currentPlayer = 'X';
    let board = ['', '', '', '', '', '', '', '', ''];
    let gameActive = true;
    
    const cells = document.querySelectorAll('.cell');
    const status = document.getElementById('game-status');
    const resetBtn = document.getElementById('reset-btn');
    
    cells.forEach((cell, index) => {
      cell.addEventListener('click', () => handleCellClick(index));
    });
    
    resetBtn.addEventListener('click', resetGame);
    
    function handleCellClick(index) {
      if (board[index] !== '' || !gameActive) return;
      
      board[index] = currentPlayer;
      drawSymbol(index, currentPlayer);
      
      if (checkWinner()) {
        status.textContent = `Player ${currentPlayer} wins!`;
        gameActive = false;
      } else if (board.every(cell => cell !== '')) {
        status.textContent = 'Draw!';
        gameActive = false;
      } else {
        currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
        status.textContent = `Player ${currentPlayer}'s turn`;
      }
    }
    
    function drawSymbol(index, symbol) {
      const row = Math.floor(index / 3);
      const col = index % 3;
      const x = 50 + col * 83.33 + 41.5;
      const y = 60 + row * 83.33 + 41.5;
      
      const svg = document.querySelector('svg');
      if (symbol === 'X') {
        const line1 = document.createElementNS('http://www.w3.org/2000/svg', 'line');
        line1.setAttribute('x1', x - 25);
        line1.setAttribute('y1', y - 25);
        line1.setAttribute('x2', x + 25);
        line1.setAttribute('y2', y + 25);
        line1.setAttribute('stroke', '#e74c3c');
        line1.setAttribute('stroke-width', '4');
        svg.appendChild(line1);
        
        const line2 = document.createElementNS('http://www.w3.org/2000/svg', 'line');
        line2.setAttribute('x1', x + 25);
        line2.setAttribute('y1', y - 25);
        line2.setAttribute('x2', x - 25);
        line2.setAttribute('y2', y + 25);
        line2.setAttribute('stroke', '#e74c3c');
        line2.setAttribute('stroke-width', '4');
        svg.appendChild(line2);
      } else {
        const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
        circle.setAttribute('cx', x);
        circle.setAttribute('cy', y);
        circle.setAttribute('r', '25');
        circle.setAttribute('fill', 'none');
        circle.setAttribute('stroke', '#3498db');
        circle.setAttribute('stroke-width', '4');
        svg.appendChild(circle);
      }
    }
    
    function checkWinner() {
      const winPatterns = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8], // Rows
        [0, 3, 6], [1, 4, 7], [2, 5, 8], // Columns
        [0, 4, 8], [2, 4, 6] // Diagonals
      ];
      
      return winPatterns.some(pattern => 
        pattern.every(index => board[index] === currentPlayer)
      );
    }
    
    function resetGame() {
      currentPlayer = 'X';
      board = ['', '', '', '', '', '', '', '', ''];
      gameActive = true;
      status.textContent = "Player X's turn";
      
      // Remove all X and O symbols
      const symbols = document.querySelectorAll('line[stroke="#e74c3c"], circle[stroke="#3498db"]');
      symbols.forEach(symbol => symbol.remove());
    }
  ]]></script>
</svg>
